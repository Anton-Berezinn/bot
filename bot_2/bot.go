package main

import (
	"encoding/json"
	"flag"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"log"
	"strconv"
	"strings"
)

type Doc struct {
	Name string `json:"name"`
	Year int    `json:"year"`
}

type Response struct {
	Docs []Doc `json:"docs"`
}

const (
	FindGenre     = 0
	EnterQuantity = 1
)

var userChatAction = make(map[int64]int)      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
var userMessageGenre = make(map[int64]string) // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∂–∞–Ω—Ä–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

func main() {
	tgToken, apiToken := getTokens()
	bot, err := tgbotapi.NewBotAPI(tgToken)
	if err != nil {

		log.Fatal("error creating bot:", err)
	}

	client := NewMovieClient(apiToken)

	updates := requestAnswer(bot)
	for update := range updates {
		if update.Message == nil {
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
		}

		chatID := update.Message.Chat.ID
		text := update.Message.Text

		if action, ok := userChatAction[chatID]; ok {
			switch action {
			case FindGenre:
				genre := strings.ToLower(text)
				if genreFound(genre) {
					userMessageGenre[chatID] = genre
					sendMessage(bot, chatID, "–°–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å?\n–í–≤–µ–¥–∏ —á–∏—Å–ª–æ: ")
					userChatAction[chatID] = EnterQuantity
				} else {
					sendMessage(bot, chatID, "–¢–∞–∫–æ–≥–æ –∂–∞–Ω—Ä–∞, —è –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ –Ω–∞—à–µ–ª\n   –í–≤–µ–¥–∏ –µ—â–µ —Ä–∞–∑:")
				}
				continue
			case EnterQuantity:
				countMovies, err := strconv.Atoi(text)
				if err != nil || countMovies <= 0 {
					sendMessage(bot, chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0")
				} else {
					genre := userMessageGenre[chatID]
					requestMovie(bot, client, genre, countMovies, chatID)
					delete(userChatAction, chatID) // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
				}
				continue
			}
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≤–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
		switch text {
		case "/start":
			sendMessage(bot, chatID, "**–ü—Ä–∏–≤–µ—Ç**\n, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ªüòÅ–ù–∞–ø–∏—à–∏ –∂–∞–Ω—Ä: ")
			userChatAction[chatID] = FindGenre
		default:
			sendMessage(bot, chatID, "–ü—Ä–∏–≤–µ—Ç\n\t–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start")
		}
	}
}

func getTokens() (string, string) {
	tgToken := flag.String("tg-token", "", "Telegram bot token")
	apiToken := flag.String("api-token", "", "Api token")
	flag.Parse()
	return *tgToken, *apiToken
}

func requestAnswer(bot *tgbotapi.BotAPI) tgbotapi.UpdatesChannel {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates, err := bot.GetUpdatesChan(u)
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ update %v", err)
	}
	return updates
}

func requestMovie(bot *tgbotapi.BotAPI, client *MovieClient, genre string, moviesCount int, chatID int64) {
	if moviesCount < 0 {
		sendMessage(bot, chatID, "–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –±–æ–ª—å—à–µ 0")
	}

	sendMessage(bot, chatID, "–Ø —É–∂–µ —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ —Ç–≤–æ–∏–º –∑–∞–ø—Ä–æ—Å–æ–º")
	answer, err := client.GetMovies(moviesCount, genre)
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å–ø–µ—à–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å %v", err)
		sendMessage(bot, chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å–ø–µ—à–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –≤ API")
		return
	}
	responseUser(bot, chatID, answer, moviesCount)
}

func responseUser(bot *tgbotapi.BotAPI, chatID int64, msg []byte, count int) {
	var response Response
	if err := json.Unmarshal(msg, &response); err != nil {
		panic(err)
	}
	countMovie := 0
	for _, movie := range response.Docs {
		if count > 0 {
			if len(movie.Name) == 0 {
				continue
			}
			count--
			countMovie++
			sendMessage(bot, chatID, fmt.Sprintf("%v: –§–∏–ª—å–º:\n\t%v\n\tYear:\n\t%v", countMovie, movie.Name, movie.Year))
		} else {
			sendMessage(bot, chatID, "–ë—É–¥–µ–º –∂–¥–∞—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞\n–ù–∞–ø–∏—à–∏ /start")
			break
		}
	}
}

func genreFound(msg string) bool {
	genres := map[string]bool{
		"–∞–Ω–∏–º–µ":           true,
		"–±–∏–æ–≥—Ä–∞—Ñ–∏—è":       true,
		"–±–æ–µ–≤–∏–∫":          true,
		"–≤–µ—Å—Ç–µ—Ä–Ω":         true,
		"–≤–æ–µ–Ω–Ω—ã–π":         true,
		"–¥–µ—Ç–µ–∫—Ç–∏–≤":        true,
		"–¥–µ—Ç—Å–∫–∏–π":         true,
		"–¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö":    true,
		"–¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π":  true,
		"–¥—Ä–∞–º–∞":           true,
		"–∏–≥—Ä–∞":            true,
		"–∏—Å—Ç–æ—Ä–∏—è":         true,
		"–∫–æ–º–µ–¥–∏—è":         true,
		"–∫–æ–Ω—Ü–µ—Ä—Ç":         true,
		"–∫–æ—Ä–æ—Ç–∫–æ–º–µ—Ç—Ä–∞–∂–∫–∞": true,
		"–∫—Ä–∏–º–∏–Ω–∞–ª":        true,
		"–º–µ–ª–æ–¥—Ä–∞–º–∞":       true,
		"–º—É–∑—ã–∫–∞":          true,
		"–º—É–ª—å—Ç—Ñ–∏–ª—å–º":      true,
		"–º—é–∑–∏–∫–ª":          true,
		"–Ω–æ–≤–æ—Å—Ç–∏":         true,
		"–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è":     true,
		"—Ä–µ–∞–ª—å–Ω–æ–µ –¢–í":     true,
		"—Å–µ–º–µ–π–Ω—ã–π":        true,
		"—Å–ø–æ—Ä—Ç":           true,
		"—Ç–æ–∫-—à–æ—É":         true,
		"—Ç—Ä–∏–ª–ª–µ—Ä":         true,
		"—É–∂–∞—Å—ã":           true,
		"—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞":      true,
		"—Ñ–∏–ª—å–º-–Ω—É–∞—Ä":      true,
		"—Ñ—ç–Ω—Ç–µ–∑–∏":         true,
		"—Ü–µ—Ä–µ–º–æ–Ω–∏—è":       true,
	}
	return genres[msg]
}

func sendMessage(bot *tgbotapi.BotAPI, chatID int64, message string) {
	msg := tgbotapi.NewMessage(chatID, message)
	if _, err := bot.Send(msg); err != nil {
		log.Printf("error in sendMessage %v", err)
	}
}
