package main

import (
	"encoding/json"
	"flag"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"log"
	"strconv"
	"strings"
	"time"
)

var (
	User_message_genre string
)

type Doc struct {
	Name string `json:"name"`
	Year int    `json:"year"`
}

type Response struct {
	Docs []Doc `json:"docs"`
}

func main() {
	bot, err := tgbotapi.NewBotAPI(tok())
	if err != nil {
		log.Fatal("error creating bot:", err)
	}
	updates := request_answer(bot)
	for {
		for update := range updates {
			chatID := update.Message.Chat.ID
			switch update.Message.Text {
			case "/start":
				sendmessage(bot, chatID, "**–ü—Ä–∏–≤–µ—Ç**\n, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ªüòÅ–ù–∞–ø–∏—à–∏ –∂–∞–Ω—Ä: ")
				start(bot, chatID)
			default:
				sendmessage(bot, chatID, "–ü—Ä–∏–≤–µ—Ç\n\t–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start")
			}

		}
	}
}

func tok() string {
	token := flag.String("token", "", "Telegram bot token")
	flag.Parse()
	return *token
}
func request_answer(bot *tgbotapi.BotAPI) tgbotapi.UpdatesChannel {
	time.Sleep(5 * time.Second)
	u := tgbotapi.NewUpdate(0)

	updates, err := bot.GetUpdatesChan(u)
	if err != nil {
		log.Fatal(err)
	}
	return updates
}

func start(bot *tgbotapi.BotAPI, chatID int64) {
	updates := request_answer(bot)
	for {
		for update := range updates {
			if update.Message.Chat.ID == chatID {
				User_message_genre = strings.ToLower(update.Message.Text)
				if FindMovie(User_message_genre) {
					Req_movie(bot, chatID)
				} else {
					sendmessage(bot, chatID, "–¢–∞–∫–æ–≥–æ –∂–∞–Ω—Ä–∞, —è –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ –Ω–∞—à–µ–ª\n   –í–≤–µ–¥–∏ –µ—â–µ —Ä–∞–∑:")
				}
			} else {
				sendmessage(bot, chatID, "–£–ø—Å, something wrong.... ")
			}
		}

	}
}

func Req_movie(bot *tgbotapi.BotAPI, chatID int64) {
	sendmessage(bot, chatID, "–°–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å?\n–í–≤–µ–¥–∏ —á–∏—Å–ª–æ: ")
	updates := request_answer(bot)
	for {
		for update := range updates {
			if update.Message.Chat.ID == chatID {
				count_movies := update.Message.Text
				if C, err := strconv.Atoi(count_movies); err == nil {
					if C > 0 {
						sendmessage(bot, chatID, "–Ø —É–∂–µ —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ —Ç–≤–æ–∏–º –∑–∞–ø—Ä–æ—Å–æ–º")
						answer := request_movie(C, User_message_genre)
						Response_user(bot, chatID, answer, C)
					} else {
						sendmessage(bot, chatID, "–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –∫–æ—Ç–æ—Ä–æ–µ –±–æ–ª—å—à–µ 0")
					}
				} else {
					m := "–£–±–µ–¥–∏—Å—å —á—Ç–æ —Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞–ª —á–∏—Å–ª–æ"
					sendmessage(bot, chatID, m)
				}

			} else {
				sendmessage(bot, chatID, "something wrong")
			}
		}
	}

}

func Response_user(bot *tgbotapi.BotAPI, chatID int64, msg []byte, count int) {
	updates := request_answer(bot)
	var response Response
	if err := json.Unmarshal(msg, &response); err != nil {
		panic(err)
	}
	for update := range updates {
		if update.Message.Chat.ID == chatID {
			count_movie := 0
			for _, movie := range response.Docs {
				if count > 0 {
					fmt.Println(len(movie.Name))
					if len(movie.Name) == 0 {
						continue
					} else {
						fmt.Println("dsfe")
						count--
						count_movie += 1
						sendmessage(bot, chatID, fmt.Sprintf("%v: –§–∏–ª—å–º:\n\t%v\n\tYear:\n\t%v", count_movie, movie.Name, movie.Year))
					}
				} else {
					sendmessage(bot, chatID, "–ë—É–¥–µ–º –∂–¥–∞—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞")
					break
				}
			}
		}
	}

}

func FindMovie(msg string) bool {
	genre := map[string]bool{
		"–∞–Ω–∏–º–µ":           true,
		"–±–∏–æ–≥—Ä–∞—Ñ–∏—è":       true,
		"–±–æ–µ–≤–∏–∫":          true,
		"–≤–µ—Å—Ç–µ—Ä–Ω":         true,
		"–≤–æ–µ–Ω–Ω—ã–π":         true,
		"–¥–µ—Ç–µ–∫—Ç–∏–≤":        true,
		"–¥–µ—Ç—Å–∫–∏–π":         true,
		"–¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö":    true,
		"–¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π":  true,
		"–¥—Ä–∞–º–∞":           true,
		"–∏–≥—Ä–∞":            true,
		"–∏—Å—Ç–æ—Ä–∏—è":         true,
		"–∫–æ–º–µ–¥–∏—è":         true,
		"–∫–æ–Ω—Ü–µ—Ä—Ç":         true,
		"–∫–æ—Ä–æ—Ç–∫–æ–º–µ—Ç—Ä–∞–∂–∫–∞": true,
		"–∫—Ä–∏–º–∏–Ω–∞–ª":        true,
		"–º–µ–ª–æ–¥—Ä–∞–º–∞":       true,
		"–º—É–∑—ã–∫–∞":          true,
		"–º—É–ª—å—Ç—Ñ–∏–ª—å–º":      true,
		"–º—é–∑–∏–∫–ª":          true,
		"–Ω–æ–≤–æ—Å—Ç–∏":         true,
		"–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è":     true,
		"—Ä–µ–∞–ª—å–Ω–æ–µ –¢–í":     true,
		"—Å–µ–º–µ–π–Ω—ã–π":        true,
		"—Å–ø–æ—Ä—Ç":           true,
		"—Ç–æ–∫-—à–æ—É":         true,
		"—Ç—Ä–∏–ª–ª–µ—Ä":         true,
		"—É–∂–∞—Å—ã":           true,
		"—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞":      true,
		"—Ñ–∏–ª—å–º-–Ω—É–∞—Ä":      true,
		"—Ñ—ç–Ω—Ç–µ–∑–∏":         true,
		"—Ü–µ—Ä–µ–º–æ–Ω–∏—è":       true,
	}
	return genre[msg]
}

func sendmessage(bot *tgbotapi.BotAPI, chatId int64, message string) {
	m := tgbotapi.NewMessage(chatId, message)
	if _, err := bot.Send(m); err != nil {
		log.Fatal(err)
	}
}
